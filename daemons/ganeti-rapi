#!/usr/bin/python
#

# Copyright (C) 2006, 2007 Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

""" Ganeti Remote API master script.
"""

import glob
import logging
import optparse
import sys
import os
import signal

from ganeti import constants
from ganeti import errors
from ganeti import http
from ganeti import daemon
from ganeti import ssconf
from ganeti import utils
from ganeti.rapi import connector

import ganeti.http.server


class RemoteApiHttpServer(http.server.HttpServer):
  """REST Request Handler Class.

  """
  def __init__(self, *args, **kwargs):
    http.server.HttpServer.__init__(self, *args, **kwargs)
    self._resmap = connector.Mapper()

  def HandleRequest(self, req):
    """Handles a request.

    """
    (HandlerClass, items, args) = self._resmap.getController(req.request_path)
    handler = HandlerClass(items, args, req)

    method = req.request_method.upper()
    try:
      fn = getattr(handler, method)
    except AttributeError, err:
      raise http.HttpBadRequest()

    try:
      result = fn()
      sn = handler.getSerialNumber()
      if sn:
        req.response_headers[http.HTTP_ETAG] = str(sn)
    except:
      logging.exception("Error while handling the %s request", method)
      raise

    return result


def ParseOptions():
  """Parse the command line options.

  @return: (options, args) as from OptionParser.parse_args()

  """
  parser = optparse.OptionParser(description="Ganeti Remote API",
                    usage="%prog [-d] [-p port]",
                    version="%%prog (ganeti) %s" %
                                 constants.RAPI_VERSION)
  parser.add_option("-d", "--debug", dest="debug",
                    help="Enable some debug messages",
                    default=False, action="store_true")
  parser.add_option("-p", "--port", dest="port",
                    help="Port to run API (%s default)." %
                                 constants.RAPI_PORT,
                    default=constants.RAPI_PORT, type="int")
  parser.add_option("-S", "--https", dest="ssl",
                    help="Secure HTTP protocol with SSL",
                    default=False, action="store_true")
  parser.add_option("-K", "--ssl-key", dest="ssl_key",
                    help="SSL key",
                    default=None, type="string")
  parser.add_option("-C", "--ssl-cert", dest="ssl_cert",
                    help="SSL certificate",
                    default=None, type="string")
  parser.add_option("-f", "--foreground", dest="fork",
                    help="Don't detach from the current terminal",
                    default=True, action="store_false")

  options, args = parser.parse_args()

  if len(args) != 0:
    print >> sys.stderr, "Usage: %s [-d] [-p port]" % sys.argv[0]
    sys.exit(1)

  if options.ssl and not (options.ssl_cert and options.ssl_key):
    print >> sys.stderr, ("For secure mode please provide "
                         "--ssl-key and --ssl-cert arguments")
    sys.exit(1)

  return options, args


def main():
  """Main function.

  """
  options, args = ParseOptions()

  ssconf.CheckMaster(options.debug)

  if options.fork:
    utils.Daemonize(logfile=constants.LOG_RAPISERVER)

  utils.SetupLogging(constants.LOG_RAPISERVER, debug=options.debug,
                     stderr_logging=not options.fork)

  utils.WritePidFile(constants.RAPI_PID)
  try:
    mainloop = daemon.Mainloop()
    server = RemoteApiHttpServer(mainloop, "", options.port)
    server.Start()
    try:
      mainloop.Run()
    finally:
      server.Stop()
  finally:
    utils.RemovePidFile(constants.RAPI_PID)


if __name__ == '__main__':
  main()
